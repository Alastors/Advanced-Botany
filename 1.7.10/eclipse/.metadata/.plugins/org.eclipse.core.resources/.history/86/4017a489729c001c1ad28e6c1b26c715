package ab.common.block.subtile;

import net.minecraft.block.material.Material;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;
import thaumcraft.api.aspects.Aspect;
import thaumcraft.common.entities.EntityAspectOrb;
import vazkii.botania.api.subtile.SubTileFunctional;
import vazkii.botania.common.Botania;
import vazkii.botania.common.block.ModBlocks;

public class SubTilePureGladiolus extends SubTileFunctional {

	private static final int MAX_MANA = 10000;
	private static final String COOLDOWN_TAG = "Cooldown";
	private static final Aspect[] PRIMALS = new Aspect[] { Aspect.AIR, Aspect.WATER, Aspect.EARTH, Aspect.ENTROPY,
			Aspect.ORDER, Aspect.FIRE };

	private int cooldown = 0;
	protected static int manaRequare = 500;

	public void onUpdate() {
		super.onUpdate();
		int tick = 1;
		final World world = this.supertile.getWorldObj();
		final int x = this.supertile.xCoord;
		final int y = this.supertile.yCoord;
		final int z = this.supertile.zCoord;

		if (world.getBlock(x, y + 1, z).getMaterial() != Material.air)
			return;

		if (world.getBlock(x, y - 1, z) == ModBlocks.enchantedSoil)
			tick = 2;

		if (this.mana >= manaRequare && cooldown == 0) {
			mana -= manaRequare;
			cooldown = 180;
		}

		if (cooldown > 0) {
			cooldown -= tick;
			if (world.isRemote) {
				Aspect a = PRIMALS[world.rand.nextInt(6)];
				if (world.rand.nextInt(3) == 0)
					Botania.proxy.wispFX(this.supertile.getWorldObj(), x + 0.5 - 0.1 + Math.random() * 0.2, y + 0.93,
							z + 0.5 - 0.1 + Math.random() * 0.2, getR(a), getG(a), getB(a), 0.09f, -0.012f, 1.8f);
			}
			if (cooldown <= 0) {
				spawnAspectOrbs(world, x + 0.5, y + 1.0, z + 0.5);
				cooldown = -80;
			}
		} else if (cooldown < 0)
			cooldown += tick;

		this.sync();
	}

	public void spawnAspectOrbs(World world, double x, double y, double z) {
		if (!world.isRemote)
			for (int i = 0; i < 3 + world.rand.nextInt(3); i++) {
				EntityAspectOrb orb = new EntityAspectOrb(world, x, y, z, PRIMALS[world.rand.nextInt(6)],
						2 + world.rand.nextInt(3));
				orb.motionX = 0.05 - Math.random() * 0.1;
				orb.motionY = 0.07;
				orb.motionZ = 0.05 - Math.random() * 0.1;
				world.spawnEntityInWorld(orb);
			}

		for (int i = 0; i < 13; i++) {
			Aspect a = PRIMALS[world.rand.nextInt(6)];
			Botania.proxy.sparkleFX(world, x + 0.4 - Math.random() * 0.8, y + 0.4 - Math.random() * 0.8,
					z + 0.4 - Math.random() * 0.8, getR(a), getG(a), getB(a), 2.4F * (float) (Math.random() - 0.5D), 4);
		}
	}

	private float getR(Aspect aspect) {
		int color = aspect.getColor();
		return (color >> 16) / 255f;
	}

	private float getB(Aspect aspect) {
		return ((aspect.getColor() >> 8) & 255) / 255f;
	}

	private float getG(Aspect aspect) {
		return (aspect.getColor() & 255) / 255f;
	}

	public int getColor() {
		return 0xFF00FF;
	}

	@Override
	public int getMaxMana() {
		return MAX_MANA;
	}

	public void writeToPacketNBT(NBTTagCompound cmp) {
		super.writeToPacketNBT(cmp);
		cmp.setInteger(COOLDOWN_TAG, this.cooldown);
	}

	public void readFromPacketNBT(NBTTagCompound cmp) {
		super.readFromPacketNBT(cmp);
		this.cooldown = cmp.getInteger(COOLDOWN_TAG);
	}
}
