package ab.client.render.tile;

import java.util.Random;

import org.lwjgl.opengl.GL11;

import ab.common.block.BlockMagicCraftCrate;
import ab.common.block.tile.TileMagicCraftCrate;
import ab.common.lib.register.BlockListAB;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import vazkii.botania.client.core.handler.ClientTickHandler;

public class RenderTileMagicCraftingCrate extends TileEntitySpecialRenderer {

	public void renderTileEntityAt(TileEntity tile, double x, double y, double z, float fq) {
		double time = (tile.getWorldObj() == null) ? 0.0D : (ClientTickHandler.ticksInGame + fq);
		if(tile != null)
			time += (new Random((tile.xCoord ^ tile.yCoord ^ tile.zCoord))).nextInt(360); 
		float f1 = 0.002f;
		float f2 = 0.125f;
		float f3 = 0.1875f;
		float f4 = 0.25f;
		TileMagicCraftCrate crate = (TileMagicCraftCrate) tile;
		boolean[][] pattern = crate.getPattern();
		GL11.glPushMatrix();
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glDisable(GL11.GL_LIGHTING);
		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
		Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.locationBlocksTexture);
		Tessellator t = new Tessellator();
		t.startDrawingQuads();
		t.setColorRGBA_I(0xfc0195, 50);
		IIcon icon = ((BlockMagicCraftCrate)BlockListAB.blockMagicCraftCrate).nothing;
		float maxU = icon.getMaxU();
		float maxV = icon.getMaxV();
		float minU = icon.getMinU();
		float minV = icon.getMinV();
		boolean hasPattern = false;
		for(int i = 0; i < 3; i++)
			for(int j = 0; j < 3; j++) {
				if(!pattern[i][j]) {
					int i1 = 2 - i;
					int j1 = 2 - j;
					hasPattern = true;
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, y + 1 + f1, z + f4 + f3 * i1+ f2, maxU, maxV);
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, y + 1 + f1, z + f4 + f3 * i1, maxU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1, y + 1 + f1, z + f4 + f3 * i1, minU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1, y + 1 + f1, z + f4 + f3 * i1+ f2, minU, maxV);
					float f0 = f2;
					if(i == 0 && j == 1)
						f0 = 0.0625f;
					float minY = (float) (y + f4 + f3 * i1);
					float maxY = minY + f0;
					t.addVertexWithUV(x + f4 + f3 * j1, minY, z - f1, maxU, maxV);
					t.addVertexWithUV(x + f4 + f3 * j1, maxY, z - f1, maxU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, maxY, z - f1, minU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, minY, z - f1, minU, maxV);
					t.addVertexWithUV(x + 1 + f1, minY, z + f4 + f3 * j1, maxU, maxV);
					t.addVertexWithUV(x + 1 + f1, maxY, z + f4 + f3 * j1, maxU, minV);
					t.addVertexWithUV(x + 1 + f1, maxY, z + f4 + f3 * j1 + f2, minU, minV);
					t.addVertexWithUV(x + 1 + f1, minY, z + f4 + f3 * j1 + f2, minU, maxV);
					j1 = j;
					t.addVertexWithUV(x - f1, minY, z + f4 + f3 * j1 + f2, maxU, maxV);
					t.addVertexWithUV(x - f1, maxY, z + f4 + f3 * j1 + f2, maxU, minV);
					t.addVertexWithUV(x - f1, maxY, z + f4 + f3 * j1, minU, minV);
					t.addVertexWithUV(x - f1, minY, z + f4 + f3 * j1, minU, maxV);
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, minY, z + 1 + f1, maxU, maxV);
					t.addVertexWithUV(x + f4 + f3 * j1 + f2, maxY, z + 1 + f1, maxU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1, maxY, z + 1 + f1, minU, minV);
					t.addVertexWithUV(x + f4 + f3 * j1, minY, z + 1 + f1, minU, maxV);
				}
			}
		t.draw();
		GL11.glDisable(GL11.GL_BLEND);
		GL11.glEnable(GL11.GL_LIGHTING);
		GL11.glPopMatrix();
		ItemStack wand = crate.getStackInSlot(10);
		if(wand != null) {
			GL11.glPushMatrix();
			GL11.glTranslated(x + 0.5, y + 1.12, z + 0.5);
		//	GL11.glRotatef(0.0f, 0.0f, 1.0f, 0.0f);
			GL11.glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
			EntityItem entity = new EntityItem(tile.getWorldObj(), 0, -0.125, 0, wand.copy());
			entity.hoverStart = 0.0f;
			RenderItem.renderInFrame = true;
			RenderManager.instance.renderEntityWithPosYaw(entity, 0, -0.285, 0, 0.0f, 0.0f);
			RenderItem.renderInFrame = false;
			GL11.glPopMatrix();
		}
	}
}
